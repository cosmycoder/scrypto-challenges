OP1=$(resim new-account)
export PRIV_KEY1=$(echo "$OP1" | sed -nr "s/Private key: ([[:alnum:]_]+)/\1/p")
export PUB_KEY1=$(echo "$OP1" | sed -nr "s/Public key: ([[:alnum:]_]+)/\1/p")
export ACC_ADDRESS1=$(echo "$OP1" | sed -nr "s/Account component address: ([[:alnum:]_]+)/\1/p")
OP2=$(resim new-account)
export PRIV_KEY2=$(echo "$OP2" | sed -nr "s/Private key: ([[:alnum:]_]+)/\1/p")
export PUB_KEY2=$(echo "$OP2" | sed -nr "s/Public key: ([[:alnum:]_]+)/\1/p")
export ACC_ADDRESS2=$(echo "$OP2" | sed -nr "s/Account component address: ([[:alnum:]_]+)/\1/p")
OP3=$(resim new-account)
export PRIV_KEY3=$(echo "$OP3" | sed -nr "s/Private key: ([[:alnum:]_]+)/\1/p")
export PUB_KEY3=$(echo "$OP3" | sed -nr "s/Public key: ([[:alnum:]_]+)/\1/p")
export ACC_ADDRESS3=$(echo "$OP3" | sed -nr "s/Account component address: ([[:alnum:]_]+)/\1/p")
OP4=$(resim new-account)
export PRIV_KEY4=$(echo "$OP4" | sed -nr "s/Private key: ([[:alnum:]_]+)/\1/p")
export PUB_KEY4=$(echo "$OP4" | sed -nr "s/Public key: ([[:alnum:]_]+)/\1/p")
export ACC_ADDRESS4=$(echo "$OP4" | sed -nr "s/Account component address: ([[:alnum:]_]+)/\1/p")

resim set-default-account $ACC_ADDRESS1 $PRIV_KEY1

PK_OP=$(resim publish ".")
export PACKAGE=$(echo "$PK_OP" | sed -nr "s/Success! New Package: ([[:alnum:]_]+)/\1/p")
M_OP=$(resim run "./transactions/farmersmarket.rtm")
export ORACLE=$(echo "$M_OP" | sed -nr "s/.* Component: ([[:alnum:]_]+)/\1/p" | sed '1q;d')
export FARMER_COMPONENT=$(echo "$M_OP" | sed -nr "s/.* Component: ([[:alnum:]_]+)/\1/p" | sed '2q;d')
export PROTOCOL_ADMIN=$(echo "$M_OP" | sed -nr "s/.* Resource: ([[:alnum:]_]+)/\1/p" | sed '2q;d')
R_OP=$(resim run "./transactions/radex.rtm")
export RADEX=$(echo "$R_OP" | sed -nr "s/.* Component: ([[:alnum:]_]+)/\1/p" | sed '1q;d')
D_OP=$(resim run "./transactions/degenfi.rtm")
export DEGENFI=$(echo "$D_OP" | sed -nr "s/.* Component: ([[:alnum:]_]+)/\1/p" | sed '3q;d')
export FLASH=$(echo "$D_OP" | sed -nr "s/.* Resource: ([[:alnum:]_]+)/\1/p" | sed '2q;d')


ID=$(resim run "./transactions/investor_dashboard.rtm")
export IDASHBOARD=$(echo "$ID" | sed -nr "s/.* Component: ([[:alnum:]_]+)/\1/p" | sed '1q;d')

---------  CREATE TB FOR FUND MANAGER & BORROWER---------
resim set-default-account $ACC_ADDRESS2 $PRIV_KEY2

M_OP=$(resim run "./transactions/mint_tokens.rtm")
export USD=$(echo "$M_OP" | sed -nr "s/.* Resource: ([[:alnum:]_]+)/\1/p" | sed '1q;d')
export BTC=$(echo "$M_OP" | sed -nr "s/.* Resource: ([[:alnum:]_]+)/\1/p" | sed '2q;d')
export DOGE=$(echo "$M_OP" | sed -nr "s/.* Resource: ([[:alnum:]_]+)/\1/p" | sed '3q;d')
export XRD=030000000000000000000000000000000000000000000000000004

resim run ./transactions/set_price.rtm

resim run ./transactions/transfer_liquidity.rtm

C_FMTB=$(resim run "./transactions/create_fm_tb.rtm")
export F_TB=$(echo "$C_FMTB" | sed -nr "s/.* The resource address of your temporary badge is: ([[:alnum:]_]+)/\1/p")

// Have FM transfer liquidity to Investor.

resim set-default-account $ACC_ADDRESS4 $PRIV_KEY4
C_BTB=$(resim run "./transactions/create_b_tb.rtm")
export B_TB=$(echo "$C_BTB" | sed -nr "s/.* The resource address of your temporary badge is: ([[:alnum:]_]+)/\1/p")


--------- MAPLE ADMIN CREATES BADGES FOR FUND MANAGER & BORROWER ----------
resim set-default-account $ACC_ADDRESS1 $PRIV_KEY1

C_F=$(resim run "./transactions/create_f.rtm")
export FDASHBOARD=$(echo "$C_F" | sed -nr "s/.* Component: ([[:alnum:]_]+)/\1/p" | sed '1q;d')

C_B=$(resim run "./transactions/create_b.rtm")
export BDASHBOARD=$(echo "$C_B" | sed -nr "s/.* Component: ([[:alnum:]_]+)/\1/p" | sed '1q;d')

---------- FUND MANAGER CREATES INDEX FUND ---------
resim set-default-account $ACC_ADDRESS2 $PRIV_KEY2

C_CB=$(resim run "./transactions/claim_f_badge.rtm")
export F_BADGE=$(echo "$C_CB" | sed -nr "s/.* The resource address of your NFT is: ([[:alnum:]_]+)/\1/p")
C_IF=$(resim run "./transactions/new_index_fund.rtm")
export INDEX=$(echo "$C_IF" | sed -nr "s/.* Component: ([[:alnum:]_]+)/\1/p" | sed '1q;d')
export INDEX_BADGE=$(echo "$C_IF" | sed -nr "s/.* Resource: ([[:alnum:]_]+)/\1/p" | sed '1q;d')

I_T=$(resim run "./transactions/issue_tokens.rtm")
export RADSH=$(echo "$I_T" | sed -nr "s/.* The resource address of $RADSH token is: ([[:alnum:]_]+)/\1/p")

resim run ./transactions/new_liquidity_pool.rtm

resim run ./transactions/integrate_dex.rtm

----------- INVESTOR PURCHASES INDEX FUND ---------
resim set-default-account $ACC_ADDRESS3 $PRIV_KEY3

resim call-method $IDASHBOARD retrieve_index_funds_lists

resim run ./transactions/buy_fund_tokens.rtm

resim set_price

Scenario 1: Fund tokens increase in price sell fund tokens

Scenario 2: Fund tokens increase in price and redeem underlying asset.


----- FUND MANAGER REBALANCES FUND -----

resim set-default-account $ACC_ADDRESS2 $PRIV_KEY2

Scenario 1: XRD increases in price. Rebalance XRD.


----- FUND MANAGER INTEGRATES LENDING -----




---------- FUND MANAGER CREATES DEBT FUND ---------
resim set-default-account $ACC_ADDRESS2 $PRIV_KEY2

C_DF=$(resim run "./transactions/new_debt_fund.rtm")
export DEBT_FUND=$(echo "$C_DF" | sed -nr "s/.* Component: ([[:alnum:]_]+)/\1/p" | sed '1q;d')
export DF_BADGE=$(echo "$C_DF" | sed -nr "s/.* Resource: ([[:alnum:]_]+)/\1/p" | sed '2q;d')
export TT=$(echo "$C_DF" | sed -nr "s/.* Resource: ([[:alnum:]_]+)/\1/p" | sed '4q;d')


--------- INVESTOR SUPPLIES LIQUIDITY? -----------
resim set-default-account $ACC_ADDRESS3 $PRIV_KEY3

resim call-method $IDASHBOARD retrieve_debt_funds_list

resim call-method $IDASHBOARD supply_liquidity "4 Arrows Capital" 10000,$USD


--------- BORROWER REQUEST LOAN ---------------
resim set-default-account $ACC_ADDRESS4 $PRIV_KEY4
C_CB=$(resim run "./transactions/claim_b_badge.rtm")
export B_BADGE=$(echo "$C_CB" | sed -nr "s/.* The resource address of your NFT is: ([[:alnum:]_]+)/\1/p")

LR=$(resim run "./transactions/new_loan_request.rtm")
export LR=$(echo "$LR" | sed -nr "s/.* The NFT ID of this loan request is: ([[:alnum:]_]+)/\1/p")

--------- FUND MANAGER VIEWS LOAN REQUEST --------
resim set-default-account $ACC_ADDRESS2 $PRIV_KEY2

resim run ./transactions/loan_request_list.rtm

C_FL=$(resim run "./transactions/instantiate_funding_locker.rtm")
export FUND_LOCKER=$(echo "$C_FL" | sed -nr "s/.* Component: ([[:alnum:]_]+)/\1/p" | sed '1q;d')
export LNFTID=$(echo "$C_FL" | sed -nr "s/.* The loan id is: ([[:alnum:]_]+)/\1/p")

resim call-method $DEBT_FUND view_loan $LNFTID


----- BORROWER VIEWS APPROVED LOANS ---------
resim set-default-account $ACC_ADDRESS4 $PRIV_KEY4

resim run ./transactions/view_approved_loan_requests.rtm

resim run ./transactions/deposit_collateral.rtm

export LNFT=03c3a5b97fe33b9b055339fd8febef791723f63102d4d3b1fe62cb

view loan to see if it's ready to fund.

----- FUND MANAGER FUNDS LOAN --------
resim set-default-account $ACC_ADDRESS2 $PRIV_KEY2

resim call-method $DEBT_FUND fund_loan 1,$DF_BADGE 500 $LNFTID

view loan to see if it's ready to fund.


---- BORROWER REQUESTS DRAW -------
resim set-default-account $ACC_ADDRESS4 $PRIV_KEY4

resim call-method $BDASHBOARD draw_request 1,$LNFT 250

------ FUND MANAGER APPROVES DRAW ------
resim set-default-account $ACC_ADDRESS2 $PRIV_KEY2
resim call-method $DEBT_FUND view_draw_request $LNFTID
resim call-method $DEBT_FUND approve_draw_request 1,$DF_BADGE $LNFTID

---- BORROWER DRAWS FUNDS -----
resim set-default-account $ACC_ADDRESS4 $PRIV_KEY4

Receive the draw

---- FUND MANAGER SETS INTEREST EXPENSE -----
resim set-default-account $ACC_ADDRESS2 $PRIV_KEY2

resim set-current-epoch 10

---- BORROWER PAYS INTEREST ------
resim set-default-account $ACC_ADDRESS4 $PRIV_KEY4


---- FUND MANAGER TRANSFER FEES ----
resim set-default-account $ACC_ADDRESS2 $PRIV_KEY2


---- INVESTOR CLAIMS FEES -----
resim set-default-account $ACC_ADDRESS3 $PRIV_KEY3



// ** INDEX FUND TO DO LIST **
// * Figure out fees
// Connect index fund to the pool_delegate dashboard
// Consider access control between maple finance, pool delegate dashboard, index fund and debt fund.
// Add a whitelist/blacklist of componentaddress
// make sure when you issue tokens people can't add tokens that aren't supported by the fund.
// Anyway to make sure that the right component address is integrated?
// Runtime::actor().component_address()
// Change querying to ResourceAddress of the Fund Tokens
// * Change how the price is set when issuing tokens


// ** FUND MANAGER DASHBOARD TO DO LIST **
// * Tie finding lending pool and funding lockers to NFT vs stored in Components.
// * Showing Proof, just make sure that the resource address belongs to this protocol (verified by global index)

// ** DEBT FUNDS **
// The debt fund produces two badges, one that's provided to the fund manager dashboard and one for the fund manager (two resource address). 
// Any fund manager can access the dashboard (so long as they have the fund manager badge)
// Fund managers access the debt fund by supplying the proof of *their* debt fund badge. Checks are made to make sure that they are the manager.
// via their NFT. The dashboard then can make authorized calls.
// * Removing liquidity logic (need lock-up?)
// Have a approve loan request method?
// * Debt fund admin vs loan nft admin

// ** Borrower Dashboard ** 
// * Clean up fn get_resource_manager and fn _authorize_update
// * Update data for borrower


Why does Fund Manager Dashboard component need access badge to Funding Locker?
* To update the loan.

// I think debt_fund and funding_locker should be highly integrated.
