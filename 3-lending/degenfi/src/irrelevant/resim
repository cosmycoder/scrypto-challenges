resim call-function $PACKAGE DegenFi new
resim call-method $COMPONENT new_user $ACC_ADDRESS1
resim call-method $COMPONENT new_lending_pool "1,$PROOF" "1000,$XRD"
resim call-method $COMPONENT new_lending_pool "1,$PROOF" "1000,$USD"
resim call-method $COMPONENT deposit_supply "1,$PROOF" "4000,$XRD"
resim call-method $COMPONENT deposit_supply "1,$PROOF" "4000,$USD"
resim call-method $COMPONENT deposit_collateral 1,$PROOF $XRD 1000,$XRD
resim call-method $COMPONENT convert_to_collateral 1,$PROOF $XRD 1000
resim call-method $COMPONENT convert_to_deposit 1,$PROOF $XRD 1000

resim call-method $COMPONENT borrow "1,$PROOF" "$XRD" 1000
resim call-method $COMPONENT borrow 1,$PROOF $USD $XRD 2000
resim call-method $COMPONENT repay 1,$PROOF $loan $XRD 1000,$XRD

resim call-method $COMPONENT redeem 1,$PROOF $XRD 1000

resim call-method $COMPONENT flash_borrow "1,$PROOF" "$XRD" 1000 "1,$flash" --manifest ./transactions/flash_borrow1.rtm
resim call-method $COMPONENT flash_repay "1,$PROOF" "$XRD" "1000,$XRD" "1,$flash" --manifest ./transactions/flash_repay1.rtm

resim call-method $lending set_address $collateral
resim call-method $collateral set_address $lending 
resim call-method $COMPONENT set_address $XRD $COLLATERALXRD
resim call-method $COMPONENT set_address $USD $COLLATERALUSD

resim call-method $COMPONENT check_total_supplied $XRD
resim call-method $COMPONENT check_total_supplied $USD
resim call-method $COMPONENT check_total_collateral_supplied $XRD
resim call-method $COMPONENT check_total_borrowed $XRD
resim call-method $COMPONENT check_liquidity $XRD

resim call-method $COMPONENT get_sbt_info 1,$PROOF
resim call-method $COMPONENT get_loan_info $XRD $LOAN

resim call-method $COMPONENT set_price 1,$PROOF $XRD 0.5
resim call-method $COMPONENT find_bad_loans $XRD
resim call-method $COMPONENT liquidate $LOAN $XRD 1000,$XRD
resim call-method $COMPONENT credit_score_test 1,$PROOF 300

$XRD="030000000000000000000000000000000000000000000000000004"


# MANIFEST
resim call-method $COMPONENT flash_borrow $XRD 3000 --manifest ./transactions/transaction1.rtm
resim call-method $COMPONENT deposit_collateral 1,$PROOF 4000,$XRD --manifest ./transactions/transaction2.rtm
resim call-method $COMPONENT borrow 1,$PROOF $USD $XRD 3000 --manifest ./transactions/transaction3.rtm
resim call-method $COMPONENT swap 3000,$USD --manifest ./transactions/transaction4.rtm
resim call-method $COMPONENT flash_repay 3000,$XRD 1,$FLASH --manifest ./transactions/transaction5.rtm

resim call-method $COMPONENT flash_borrow $USD 1500 --manifest ./transactions/liquidate1.rtm
resim call-method $COMPONENT liquidate $LOAN 1500,$USD --manifest ./transactions/liquidate2.rtm
resim call-method $COMPONENT swap 1841,$XRD --manifest ./transactions/liquidate3.rtm
resim call-method $COMPONENT flash_repay 1500,$USD 1,$FLASH --manifest ./transactions/liquidate4.rtm

/// If XRD price has been changed reflect on loan  

/// finish liquidation
/// Change health factor and liquidation price when paying off loan
/// Change collateral amount of the loan NFT when liquidated
/// Test the ownersh % model
/// Need to figure out how to change value of collateral when price change
/// When you borrow the collateral amount has to be valued correctly
/// Can you supply collateral and borrow at the same time?
/// Talk to Miso about returning overpaymen
/// Retrieve fees when user converts from deposit to collateral
/// Design some logic regarding interest rate and interest collection - maybe just have all the fees batched into one
/// Call to update bad loans when liquidating
/// Set collateral address to the right lending pair?
/// Reduce collateral amount from SBT when liquidated
/// Reduce borrow balance?
/// Credit score fucked up when liquidating

./resim-client.exe --address "pte01-socket.radixdlt.com:8010"

resim publish target/wasm32-unknown-unknown/release/foldedleverage.wasm



OP1=$(resim new-account)
export PRIV_KEY1=$(echo "$OP1" | sed -nr "s/Private key: ([[:alnum:]_]+)/\1/p")
export PUB_KEY1=$(echo "$OP1" | sed -nr "s/Public key: ([[:alnum:]_]+)/\1/p")
export ACC_ADDRESS1=$(echo "$OP1" | sed -nr "s/Account component address: ([[:alnum:]_]+)/\1/p")

M_OP=$(resim run "./transactions/mint_usd.rtm")
export USD=$(echo "$M_OP" | sed -nr "s/└─ Resource: ([[:alnum:]_]+)/\1/p")

PK_OP=$(resim publish ".")
export PACKAGE=$(echo "$PK_OP" | sed -nr "s/Success! New Package: ([[:alnum:]_]+)/\1/p")
CP_OP=$(resim run "./transactions/component_creation.rtm")
export COMPONENT=$(echo "$CP_OP" | sed -nr "s/.* Component: ([[:alnum:]_]+)/\1/p" | sed '3q;d')
export FLASH=$(echo "$CP_OP" | sed -nr "s/.* Resource: ([[:alnum:]_]+)/\1/p" | sed '2q;d')

NU=$(resim run "./transactions/new_user.rtm")
export PROOF=$(echo "$NU" | sed -nr "s/.*SBT resource address is ([[:alnum:]_]+)/\1/p")




resim call-function $PACKAGE DegenFi new --manifest ./transactions/component_creation.rtm
resim call-method $COMPONENT new_user $ACC_ADDRESS1 --manifest ./transactions/new_user.rtm
resim new-token-fixed 100000 --manifest ./transactions/mint_usd.rtm
resim call-method $COMPONENT new_lending_pool "1,$PROOF" "1000,$USD" --manifest ./transactions/create_usd_pool.rtm
resim call-method $COMPONENT deposit_supply "1,$PROOF" "4000,$XRD" --manifest ./transactions/deposit_xrd.rtm





resim run ./transactions/create_usd_pool.rtm && resim run ./transactions/create_xrd_pool.rtm

resim run ./transactions/deposit_supply_xrd.rtm && resim run ./transactions/deposit_supply_usd.rtm

resim run ./transactions/instantiate_radiswap.rtm

resim run ./transactions/degen.rtm

resim run ./transactions/degen2.rtm

resim run ./transactions/check_liquidity_usd.rtm

resim run ./transactions/check_total_collateral_supplied_xrd.rtm

resim show $ACC_ADDRESS1

resim run ./transactions/get_loan_info_usd.rtm

resim run ./transactions/get_sbt_info.rtm

resim call-method $COMPONENT new_radiswap 30000,$XRD 20000,$USD 1000 lp lp l 0.01














LP_USD=$(resim run "./transactions/create_usd_pool.rtm")
export COLLATERALUSD=$(echo "$LP_USD" | sed -nr "s/.* Component: ([[:alnum:]_]+)/\1/p" | sed '2q;d')
LP_XRD=$(resim run "./transactions/create_xrd_pool.rtm")
export COLLATERALXRD=$(echo "$LP_XRD" | sed -nr "s/.* Component: ([[:alnum:]_]+)/\1/p" | sed '2q;d')



$ resim run ./transactions/degen2.rtm
Transaction Status: InvokeError
Execution Time: 116 ms
Instructions:
├─ CallMethod { component_address: 028cd52a660096a871ff2022b9ac216c2c94382ada23020e13e8fa, method: "flash_borrow", args: [ResourceAddress("03b1feb305c9ca25e4cc946e57c7ef86e25e187c68e98020b8846e"), Decimal("1500")] }
├─ CallMethod { component_address: 020d3869346218a5e8deaaf2001216dc00fcacb79fb43e30ded79a, method: "withdraw_by_amount", args: [Decimal("1500"), ResourceAddress("03b1feb305c9ca25e4cc946e57c7ef86e25e187c68e98020b8846e")] }
├─ TakeFromWorktopByAmount { amount: 1500, resource_address: 03b1feb305c9ca25e4cc946e57c7ef86e25e187c68e98020b8846e }
├─ CallMethod { component_address: 028cd52a660096a871ff2022b9ac216c2c94382ada23020e13e8fa, method: "liquidate", args: [NonFungibleId("f649c7108731305e56c6ccb2323fea4a"), ResourceAddress("03b1feb305c9ca25e4cc946e57c7ef86e25e187c68e98020b8846e"), Bucket(512u32)] }
├─ CallMethod { component_address: 020d3869346218a5e8deaaf2001216dc00fcacb79fb43e30ded79a, method: "withdraw_by_amount", args: [Decimal("1841"), ResourceAddress("030000000000000000000000000000000000000000000000000004")] }
├─ TakeFromWorktopByAmount { amount: 1841, resource_address: 030000000000000000000000000000000000000000000000000004 }
├─ CallMethod { component_address: 028cd52a660096a871ff2022b9ac216c2c94382ada23020e13e8fa, method: "swap", args: [Bucket(513u32)] }
├─ CallMethod { component_address: 020d3869346218a5e8deaaf2001216dc00fcacb79fb43e30ded79a, method: "withdraw_by_amount", args: [Decimal("1500"), ResourceAddress("03b1feb305c9ca25e4cc946e57c7ef86e25e187c68e98020b8846e")] }
├─ TakeFromWorktopByAmount { amount: 1500, resource_address: 03b1feb305c9ca25e4cc946e57c7ef86e25e187c68e98020b8846e }
├─ TakeFromWorktopByAmount { amount: 1, resource_address: 031bdcbe3baf05ddb3958a732198951fb61321cbb34a52849305c1 }
├─ CallMethod { component_address: 028cd52a660096a871ff2022b9ac216c2c94382ada23020e13e8fa, method: "flash_repay", args: [Bucket(514u32), Bucket(515u32)] }
└─ CallMethodWithAllResources { component_address: 020d3869346218a5e8deaaf2001216dc00fcacb79fb43e30ded79a, method: "deposit_batch" }
Instruction Outputs:
├─ Tuple(Bucket(1025u32), Bucket(1029u32), Bucket(1031u32)) Flash borrow
├─ Bucket(1032u32) Liquidate
└─ Bucket(512u32)
Logs: 1
└─ [ERROR] Panicked at 'called `Result::unwrap()` on an `Err` value: InvalidType { expected: Some(177), actual: 182 }', src\degenfi.rs:9:1
New Entities: 0
Error: TransactionExecutionError(InvokeError)


Instructions:
├─ CallMethod { component_address: 028cd52a660096a871ff2022b9ac216c2c94382ada23020e13e8fa, method: "flash_borrow", args: [ResourceAddress("030000000000000000000000000000000000000000000000000004"), Decimal("3000")] }
├─ CallMethod { component_address: 020d3869346218a5e8deaaf2001216dc00fcacb79fb43e30ded79a, method: "create_proof_by_amount", args: [Decimal("1"), ResourceAddress("031877b80351308d72910bebd7b8185f65925b9e6f97819c946886")] }
├─ PopFromAuthZone
├─ CallMethod { component_address: 020d3869346218a5e8deaaf2001216dc00fcacb79fb43e30ded79a, method: "withdraw_by_amount", args: [Decimal("4000"), ResourceAddress("030000000000000000000000000000000000000000000000000004")] }
├─ TakeFromWorktopByAmount { amount: 4000, resource_address: 030000000000000000000000000000000000000000000000000004 }
├─ CallMethod { component_address: 028cd52a660096a871ff2022b9ac216c2c94382ada23020e13e8fa, method: "deposit_collateral", args: [Proof(512u32), Bucket(513u32)] }
├─ CallMethod { component_address: 020d3869346218a5e8deaaf2001216dc00fcacb79fb43e30ded79a, method: "create_proof_by_amount", args: [Decimal("1"), ResourceAddress("031877b80351308d72910bebd7b8185f65925b9e6f97819c946886")] }
├─ PopFromAuthZone
├─ CallMethod { component_address: 028cd52a660096a871ff2022b9ac216c2c94382ada23020e13e8fa, method: "borrow", args: [Proof(514u32), ResourceAddress("03b1feb305c9ca25e4cc946e57c7ef86e25e187c68e98020b8846e"), ResourceAddress("030000000000000000000000000000000000000000000000000004"), Decimal("3000")] }
├─ CallMethod { component_address: 020d3869346218a5e8deaaf2001216dc00fcacb79fb43e30ded79a, method: "withdraw_by_amount", args: [Decimal("3000"), ResourceAddress("03b1feb305c9ca25e4cc946e57c7ef86e25e187c68e98020b8846e")] }
├─ TakeFromWorktopByAmount { amount: 3000, resource_address: 03b1feb305c9ca25e4cc946e57c7ef86e25e187c68e98020b8846e }
├─ CallMethod { component_address: 028cd52a660096a871ff2022b9ac216c2c94382ada23020e13e8fa, method: "swap", args: [Bucket(515u32)] }
├─ CallMethod { component_address: 020d3869346218a5e8deaaf2001216dc00fcacb79fb43e30ded79a, method: "withdraw_by_amount", args: [Decimal("3000"), ResourceAddress("030000000000000000000000000000000000000000000000000004")] }
├─ TakeFromWorktopByAmount { amount: 3000, resource_address: 030000000000000000000000000000000000000000000000000004 }
├─ TakeFromWorktopByAmount { amount: 1, resource_address: 031bdcbe3baf05ddb3958a732198951fb61321cbb34a52849305c1 }
├─ CallMethod { component_address: 028cd52a660096a871ff2022b9ac216c2c94382ada23020e13e8fa, method: "flash_repay", args: [Bucket(516u32), Bucket(517u32)] }
└─ CallMethodWithAllResources { component_address: 020d3869346218a5e8deaaf2001216dc00fcacb79fb43e30ded79a, method: "deposit_batch" }
Instruction Outputs:
├─ Tuple(Bucket(1025u32), Bucket(1029u32), Bucket(1031u32))
├─ Proof(1032u32)
├─ Proof(512u32)
├─ Bucket(1034u32)
├─ Bucket(513u32)
├─ Bucket(1040u32)
├─ Proof(1041u32)
├─ Proof(514u32)
├─ Tuple(Bucket(1056u32), Bucket(1046u32), Bucket(1058u32))
├─ Bucket(1059u32)
├─ Bucket(515u32)
├─ Bucket(1061u32)
├─ Bucket(1062u32)
├─ Bucket(516u32)
├─ Bucket(517u32)
├─ Bucket(1069u32)
└─ ()