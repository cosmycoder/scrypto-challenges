# The owner of account 4 (let's call him Alfred for the purposes of this example) has just heard of yield framing and how 
# that he could make some extra income by providing liquidity to a liquidity pool and earning a percentage of the pool
# fees that are imposed on swaps. 
# 
# Alfred has decided that he wants to sell some of the Bitcoin that he owns for USDT and then he wants to provide liquidity
# to the XRD/USDT liquidity pool in RaDEX. This transaction manifest file contains the transaction instructions for the
# selling of Bitcoin tokens for USDT and then providing liquidity to the XRD/USDT liquidity pool.

# Withdrawing 500,000 XRD and 40 BTC from Alfred's account and into the transaction worktop
CALL_METHOD ComponentAddress("<<<account4_address>>>") "withdraw_by_amount" Decimal("500000") ResourceAddress("030000000000000000000000000000000000000000000000000004");
CALL_METHOD ComponentAddress("<<<account4_address>>>") "withdraw_by_amount" Decimal("40") ResourceAddress("<<<bitcoin_resource_address>>>");

# Creating a bucket of the withdrawn Bitcoin and then swapping it for USDT
TAKE_FROM_WORKTOP ResourceAddress("<<<bitcoin_resource_address>>>") Bucket("BTC_bucket");
CALL_METHOD ComponentAddress("<<<component_address>>>") "swap" Bucket("BTC_bucket") ResourceAddress("<<<tether_resource_address>>>");

# At this point, the transaction worktop should include USDT tokens if the swap has indeed gone through correctly, so 
# we take the USDT tokens and put them in a bucket and we also put the XRD from the worktop into a bucket.
TAKE_FROM_WORKTOP ResourceAddress("<<<tether_resource_address>>>") Bucket("USDT_bucket");
TAKE_FROM_WORKTOP ResourceAddress("030000000000000000000000000000000000000000000000000004") Bucket("XRD_bucket");

# Adding liquidity to the XRD/USDT liquidity pool with all of the XRD and USDT available in the transaction worktop
CALL_METHOD ComponentAddress("<<<component_address>>>") "add_liquidity" Bucket("XRD_bucket") Bucket("USDT_bucket");

# Depositing the tracking tokens we get back into Alfred's account.
CALL_METHOD_WITH_ALL_RESOURCES ComponentAddress("<<<account4_address>>>") "deposit_batch";